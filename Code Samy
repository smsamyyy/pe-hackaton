

import numpy as np

vierge = np.zeros((5,5))

F = vierge.copy()
F[0:3,1],F[1,0],F[0,2] = 1,1,1


I = vierge.copy()
I[:,0] = 1

L = vierge.copy()
L[0:4,0],L[3,1] = 1,1

N = vierge.copy()
N[2:4,0],N[0:3,1] = 1,1

P = vierge.copy()
P[0:3,0],P[0:2,1] = 1,1

T = vierge.copy()
T[0,:],T[0:3,1] = 1,1

U = vierge.copy()
U[1,:],U[0,0],U[0,2] = 1,1,1

V = vierge.copy()
V[0:3,0],V[2,0:3] = 1,1

W = vierge.copy()
W[0:2,0],W[1:3,1],W[2:3,2] = 1,1,1

X = vierge.copy()
X[0,1],X[1,0:3],X[2,1] = 1,1,1

Y = vierge.copy()
Y[0,1],Y[1,0:2],Y[2,1],Y[3,1] = 1,1,1,1

Z = vierge.copy()
Z[0,0:2], Z[1,1], Z[2,1:3] = 1,1,1

#print(F,I,L,N,P,T,U,V,W,X,Y,Z)


#fonction rotation
def rot(piece): #rotation de 90°
    lignes, colonnes = piece.shape
    
    pieceretournee = np.zeros((colonnes, lignes), dtype=piece.dtype) 

    for i in range(lignes): #on effectue la rotation
        for j in range(colonnes):
            pieceretournee[j, lignes - 1 - i] = piece[i, j]
    
    #on souhaite effectuer un décalage vers la gauche du nombre de colonnes contenant 0 pour retrouver la pièce en haut à gauche
    nombre_de_colonnes_avec_que_des_zeros = np.sum(np.all(pieceretournee == 0, axis=0)) 
    matrice_decalage = np.roll(pieceretournee, shift=-nombre_de_colonnes_avec_que_des_zeros, axis=1)
    return matrice_decalage

print(rot(P))
